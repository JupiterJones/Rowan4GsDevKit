#!/usr/bin/env superdoit_stone
options
{
	SuperDoitRequiredOptionWithRequiredArg long: 'projectsHome'.
}
%
usage
-----
USAGE 
  $basename <loaded-package-map> --projectsHome=<project-clones-dir-path>

DESCRIPTION
  Scan the loaded into the tODE stone and export a map of the filetree packages 
  loaded into the stone.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error
  --debugGem                 If terminal is connected to stdout, bring up debugger. If not,
                             dump stack to stdout and wait for topaz to attach using topaz
                             DEBUGGEM command.

EXAMPLES
  $basename --help                           -- gs_351             # with GS_HOME set
  $basename -h                               -- -l -I ./.topazini  # with GEMSTONE set
  $basename -D <script-arguments>            <topaz-arguments>

  $basename 'loadedPackages.ston' --projectsHome=/bosch1/users/dhenrich/_stones/test_Rowan4GsDevKit/devKit
-----
%
doit
	| topez result repositoryMap packageList skippedPackages devKitHome devKitHomePath gsApplicationToolsPath gsApplicationToolsRef |
   topez := (TDTopezServer for: 1000)
     displayOops: false;
     characterLimit: 160;
     listLimit: 120;
     topezClientForwarder: TDTestClientForwarder new;
     yourself.

	packageList := topez evaluateCommandStream: 'mc list' readStream.
	repositoryMap := Dictionary new.
	skippedPackages := Set new.
	devKitHome := self projectsHome.
	devKitHomePath := devKitHome asFileReference fullName asPath.
	gsApplicationToolsRef := (devKitHome asFileReference / 'gsApplicationTools' / 'repository') asFileReference.
	gsApplicationToolsRef exists
		ifTrue: [ gsApplicationToolsPath := gsApplicationToolsRef asPath relativeTo: devKitHomePath ].
	packageList do: [:mcWorkingCopy |
		| packageName |
		GsFile gciLogServer: mcWorkingCopy printString.
		packageName := mcWorkingCopy ancestry ancestorString.
		packageName last isDigit
			ifTrue: [
				 "strip version info and get basename ... see nextVersionName" 
				packageName := packageName copyUpToLast: $- ].
    ((mcWorkingCopy repositoryGroup repositories 
			select: [:each | 
				each class = MCFileTreeRepository]) detect: [:repo | 
					(repo versionWithInfo: mcWorkingCopy currentVersionInfo) notNil ]
						ifNone: [])
							ifNil: [ 
								(gsApplicationToolsPath notNil and: [ packageName beginsWith: 'GsApplicationTools' ])
									ifTrue: [ 
										"have to force use of filetree"
										(repositoryMap 
											at: gsApplicationToolsPath pathString
											ifAbsentPut: [Set new ]) add: packageName.
										GsFile stdout tab; nextPutAll: 'gsApplicationTools package ', packageName printString, ' forcing repo directory to ', gsApplicationToolsPath pathString; lf	]
									ifFalse: [ 
										skippedPackages add: packageName.
										GsFile stdout tab; nextPutAll: 'skipping package ', packageName printString, ' no file tree repo.'; lf ] ]
							ifNotNil: [:repo |
								| repoRef  pathString |
								repoRef := repo directory pathName asFileReference asPath.
								pathString := (repoRef relativeTo: devKitHomePath) pathString.
								(repositoryMap 
									at: pathString
									ifAbsentPut: [Set new ]) add: packageName ] ].
	self positionalArgs first asFileReference 
		writeStreamDo: [:stream |
			| writer |
			stream truncate.
			"in-line STON>>put:onStreamPretty:, so I can use lf instead of cr"
			writer := STON writer on: stream.
			writer 
				newLine: Character lf asString;
				prettyPrint: true;
				nextPut: { skippedPackages . repositoryMap } ].
^ self noResult
%
