#!/usr/bin/env superdoit_stone
# Standard options are always present unless customoptions section is used
#
#options
#{
#  SuperDoitOptionalOptionWithNoArg long: 'help' short: 'h'.
#  SuperDoitOptionalOptionWithNoArg long: 'debug' short: 'D'.
#}
#%
# Example options section
#
#options
#{
#	SuperDoitOptionalOptionWithNoArg long: 'noarg'.
#	SuperDoitOptionalOptionWithNoArg long: 'noarg' short: 'n'.
#
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' default: 'default'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o'.
#	SuperDoitOptionalOptionWithRequiredArg long: 'optional' short: 'o' default: 'default'.
#
#	SuperDoitRequiredOptionWithRequiredArg long: 'required'.
#	SuperDoitRequiredOptionWithRequiredArg long: 'required' short: 'r'.
#}
#%
#
usage
-----
USAGE 
  # with GS_HOME set (<stone-name> optional if run in $GS_HOME/servers/stones/<stone-name> directory)
  $basename [--help | -h] [--debug | -D]  [--debugGem] [-- [<stone-name> [<topaz-command-line-args>] ] ]
  # with GEMSTONE set
  $basename [--help | -h] [--debug | -D]  [--debugGem] -- (-r | -l | -L) -I <path-to-.topazini> [<topaz-command-line-args>]

DESCRIPTION
  Create global variables that will be used to workaround the fact that SharedPools 
  aren't supported in Rowan 3/3.7.1.

  The plan is to create Globals in a DevKit_SharedPools symbol dictionary where the 
  necessary pools will be defined with reasonable values. We don't expect to actually 
  run code in the image, so it is just important to have the variables defined to make 
  the compiler happy. 

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error
  --debugGem                 If terminal is connected to stdout, bring up debugger. If not,
                             dump stack to stdout and wait for topaz to attach using topaz
                             DEBUGGEM command.

EXAMPLES
  $basename --help                           -- gs_351             # with GS_HOME set
  $basename -h                               -- -l -I ./.topazini  # with GEMSTONE set
  $basename -D <script-arguments>            <topaz-arguments>
  $basename --debugGem <script-arguments>    <topaz-arguments>
  $basename <script-arguments>               <topaz-arguments>
-----
%
method
sharedPoolKeys
	^
		"ChronologyConstants"
		#( DayNames DaysInMonth MonthNames NanosInMillisecond NanosInSecond SecondsInDay SecondsInHour SecondsInMinute SqueakEpoch),
		"GZipConstants"
		#( GZipAsciiFlag GZipCommentFlag GZipContinueFlag GZipDeflated GZipEncryptFlag GZipExtraField GZipMagic GZipNameFlag GZipReservedFlags),
		"ZipConstants"
		#( BaseDistance BaseLength BitLengthOrder DistanceCodes DynamicBlock EndBlock ExtraBitLengthBits ExtraDistanceBits ExtraLengthBits FixedBlock FixedDistanceTree FixedLiteralTree HashBits HashMask HashShift MatchLengthCodes MaxBitLengthBits MaxBitLengthCodes MaxBits MaxDistance MaxDistCodes MaxLengthCodes MaxLiteralCodes MaxMatch MinMatch NumLiterals Repeat11To138 Repeat3To10 Repeat3To6 StoredBlock WindowMask WindowSize),
		"ZipFileConstants"
		#( CentralDirectoryFileHeaderSignature CompressionDeflated CompressionLevelDefault CompressionLevelNone CompressionStored DataDescriptorLength DefaultDirectoryPermissions DefaultFilePermissions DeflatingCompressionFast DeflatingCompressionMaximum DeflatingCompressionNormal DeflatingCompressionSuperFast DirectoryAttrib EndOfCentralDirectorySignature FaMsdos FaUnix FileAttrib IfaBinaryFile IfaTextFile LocalFileHeaderSignature)
%
method
createNeededClassesAndGlobals
	"create classes that are in skipped packages or mcz files ... another class is subclassing them or extension methods are being added"
	| defaultSymbolDictionary cls |
	defaultSymbolDictionary := Globals.
	STONWriter subclass: 'STON091Writer'
		instVarNames: #()
		classVars: #()
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	cls := STONReader subclass: 'STON091Reader'
		instVarNames: #( encounteredHexCharacter)
		classVars: #()
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	cls category: 'Topez-Server-Core'.
	cls := (self globalNamed: 'STON091Reader') subclass: 'STON091ExternalReader'
		instVarNames: #( topez)
		classVars: #()
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	cls category: 'Topez-Server-Core'.
	Object subclass: 'MCStWriter'
		instVarNames: #( initStream stream)
		classVars: #()
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	Object subclass: 'BaselineOf'
		instVarNames: #( )
		classVars: #()
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	Object subclass: 'SocketStream'
		instVarNames: #( recentlyRead socket inBuffer
	                  outBuffer inNextToWrite outNextToWrite lastRead
	                  timeout autoFlush bufferSize binary
	                  shouldSignal )
		classVars: #()
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	TestCase subclass: 'MCTestCase'
		instVarNames: #(  saveAutoMigrate monticelloPackageModified )
		classVars: #()
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	Object subclass: 'MetacelloPlatform'
		instVarNames: #( bypassProgressBars bypassGoferLoadUpdateCategories )
		classVars: #()
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	Object subclass: 'MCFileTreeStCypressWriter'
		instVarNames: #( fileStream classDefinitions methodDefinitions stWriter initializers orderedClassNames)
		classVars: #()
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	TestCase subclass: 'GsSqueakCommonTests'
		instVarNames: #()
		classVars: #()
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	Object subclass: 'MCFileTreeFileUtils'
		instVarNames: #( )
		classVars: #( Current )
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	(self globalNamed: 'MCFileTreeFileUtils') subclass: 'MCFileTreeFileDirectoryUtils'
		instVarNames: #( )
		classVars: #( )
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	Object subclass: 'MCDefinition'
		instVarNames: #( )
		classVars: #( Instances )
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	(self globalNamed: 'MCDefinition') subclass: 'MCClassDefinition'
		instVarNames: #( name superclassName variables
	                  category type comment commentStamp
	                  traitComposition classTraitComposition)
		classVars: #( )
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	(self globalNamed: 'MCDefinition') subclass: 'MCClassDefinition'
		instVarNames: #( name superclassName variables
	                  category type comment commentStamp
	                  traitComposition classTraitComposition)
		classVars: #(Definitions UseTimeStampInComparisons)
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	(self globalNamed: 'MCDefinition') subclass: 'MCMethodDefinition'
		instVarNames: #( classIsMeta source category
	                  selector className timeStamp)
		classVars: #(Definitions UseTimeStampInComparisons)
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	Object subclass: 'Url'
		instVarNames: #( fragment )
		classVars: #(  )
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	(self globalNamed: 'Url') subclass: 'HierarchicalUrl'
		instVarNames: #( schemeName authority path
	                  query port username password)
		classVars: #( )
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	Object subclass: 'MCPackageManager'
		instVarNames: #( package modified )
		classVars: #(  )
		classInstVars: #(registry)
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	(self globalNamed: 'MCPackageManager') subclass: 'MCWorkingCopy'
		instVarNames: #( versionInfo ancestry counter
	                  repositoryGroup requiredPackages)
		classVars: #( )
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.
	Object subclass: 'UTF8Encoding'
		instVarNames: #( )
		classVars: #(  )
		classInstVars: #()
		poolDictionaries: #()
		inDictionary: defaultSymbolDictionary.

	"satisfy class/global refs in methods"
	#( 
			Smalltalk RxParser MCRepositoryGroup MCCacheRepository 
			ConnectionClosed Metacello GoferResolvedReference Gofer MCWorkingAncestry GoferVersionReference MCPlatformSupport 
			MCVersion MetacelloProjectRegistration MCPerformPostloadNotification MetacelloToolBox MetacelloMCProject
			MCThreeWayMerger MCVersionNameAndMessageRequest MCPackage SetOrClearBreakpointAnnouncement ClearAllBreakpointsAnnouncement
			MCGitHubRepository MetacelloScriptEngine MCSnapshot MCHttpRepository MCFileBasedRepository ZnClient UndefinedSymbols 
			MCAddition MCModification MCPackageLoader MCDependencySorter NameMatch STON051Reader STON051Writer MetacelloMCBaselineOfProjectSpec
			MetacelloMCBaselineProject MetacelloSkipDirtyPackageLoad MetacelloIgnorePackageLoaded MetacelloSkipDirtyPackageLoad MetacelloMCConfigurationOfProjectSpec
			ConnectionTimedOut UUIDGenerator MCVersionInfo MCDictionaryRepository ZipArchive SecureHashAlgorithm
			MetacelloVersionNumber SocketStreamSocket MCFileTreeRepository
	)
		do: [:global |
			UserGlobals at: global put: nil ].
%
method
shareAssociationsInGlobals
	"add associations to Globals to bypass Rowan symbol dictionary package affinity errors "
	({GsInteraction . STONWriter} , GsInteraction allSubclasses) do: [:class |
		| assoc |
		assoc := RowanKernel associationAt: class name.
		Globals addAssociation: assoc ]
%
doit
	| aSymbolDict |
	aSymbolDict := SymbolDictionary new
		name: #FakePoolVariables;
		yourself.
	GsSession currentSession userProfile
		insertDictionary: aSymbolDict at: 1.
	self sharedPoolKeys
		do: [:sym | aSymbolDict at: sym put: nil].
	self createNeededClassesAndGlobals.
	self shareAssociationsInGlobals.
	^ System commitTransaction
%
