#!/usr/bin/env superdoit_stone
options
{
  SuperDoitOptionalOptionWithRequiredArg long: 'loadedPackages' default: 'loadedPackages.ston'.
  SuperDoitOptionalOptionWithRequiredArg long: 'managedPackages' default: 'managedPackages.ston'.
}
%
#
usage
-----
USAGE 
  # with GS_HOME set (<stone-name> optional if run in $GS_HOME/servers/stones/<stone-name> directory)
  $basename [--help | -h] [--debug | -D]  [--debugGem] [-- [<stone-name> [<topaz-command-line-args>] ] ]
  # with GEMSTONE set
  $basename [--help | -h] [--debug | -D]  [--debugGem] -- (-r | -l | -L) -I <path-to-.topazini> [<topaz-command-line-args>]

DESCRIPTION
  Generate the managed package list. Managed pacakges are those filetree packages 
  that are present in current image, but were not packaged during generatePackageList.

OPTIONS
  <stone-name>               Name of the GsDevKit_home stone. <stone-name> argument
                             may be skipped if the script is run in a GsDevKit_home
                             stone directory (i.e., $GS_HOME/server/stones/<stone-name>
  <topaz-command-line-args>  topaz options that should be passed to topaz when running
                             running the script
  -h, --help                 display usage message
  -D, --debug                bring up topaz debugger in the event of a script error
  --debugGem                 If terminal is connected to stdout, bring up debugger. If not,
                             dump stack to stdout and wait for topaz to attach using topaz
                             DEBUGGEM command.
  --loadedPackages=<loaded-packages-ston>
                             a .ston file that contains a two element array. First element
                             is Set of names of packages skipped by generatePackageList.topaz.
                             Second element is a Dictionary keyed by the package directory 
                            listing the names of packages included in the generated project.
  --managedPackages=<managed-packages-ston>

EXAMPLES
  $basename --help                           -- gs_351             # with GS_HOME set
  $basename -h                               -- -l -I ./.topazini  # with GEMSTONE set
  $basename -D <script-arguments>            <topaz-arguments>
  $basename --debugGem <script-arguments>    <topaz-arguments>
  $basename <script-arguments>               <topaz-arguments>

  $basename
  $basename --loadedPackages=loadedPackages.ston --managedPackages=managedPackages.ston
-----
%
instvars
generatedRepositoryMap
generatedSkippedPackages
managedRepositoryMap
managedSkippedPackages
%
method
readMapFileFrom: stonFilePath
	| ar |
	stonFilePath asFileReference readStreamDo: [:stream |
	ar := STON fromStream: stream ].
	generatedSkippedPackages := ar at: 1.
	generatedRepositoryMap := ar at: 2. "key is path to package directory; value is Set of packageNames"
%
method
generateManagedPackageList
	| topez result packageList |
   topez := (TDTopezServer for: 1000)
     displayOops: false;
     characterLimit: 160;
     listLimit: 120;
     topezClientForwarder: TDTestClientForwarder new;
     yourself.
	packageList := topez evaluateCommandStream: 'mc list' readStream.
	managedRepositoryMap := Dictionary new.
	managedSkippedPackages := Set new.

	packageList do: [:mcWorkingCopy |
		| packageName |
		GsFile gciLogServer: mcWorkingCopy printString.
		packageName := mcWorkingCopy ancestry ancestorString.
		packageName last isDigit
			ifTrue: [
				"strip version info and get basename ... see nextVersionName" 
				packageName := packageName copyUpToLast: $- ].
    ((mcWorkingCopy repositoryGroup repositories 
			select: [:each | 
				each class = MCFileTreeRepository]) detect: [:repo | 
					(repo versionWithInfo: mcWorkingCopy currentVersionInfo) notNil ]
						ifNone: [])
							ifNil: [
								(generatedSkippedPackages includes: packageName)
									ifFalse: [  
										managedSkippedPackages add: packageName.
										GsFile stdout tab; nextPutAll: 'skipping package ', packageName printString, ' no file tree repo.'; lf. ] ]
							ifNotNil: [:repo |
							| repoPath |
							repoPath := repo directory pathName.
							(generatedRepositoryMap includesKey: repoPath)
								ifTrue: [ 
									"already managed"
									managedSkippedPackages add: packageName.
									GsFile stdout tab; nextPutAll: 'skipping package ', packageName printString, ' already managed.'; lf ]
								ifFalse: [ 					
									(managedRepositoryMap 
										at: repo directory pathName
										ifAbsentPut: [Set new ]) add: packageName ] ] ].
%
doit
	self readMapFileFrom: self loadedPackages asFileReference.
	self generateManagedPackageList.
	self managedPackages asFileReference 
		writeStreamDo: [:stream |
			stream truncate.
	  	STON 
				put: { skippedPackages . repositoryMap }
				onStream: stream ].
	^ true
%
